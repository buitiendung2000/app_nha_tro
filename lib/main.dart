import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:sizer/sizer.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

import 'package:tinh_tien_dien_nuoc_phong_tro/controller/provider/authProvider/mobileAuthProvider.dart';
import 'package:tinh_tien_dien_nuoc_phong_tro/view/authScreen/mobileLoginScreen.dart';
import 'package:tinh_tien_dien_nuoc_phong_tro/view/homeScreen/homeScreen.dart';

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  debugPrint('üîî X·ª≠ l√Ω th√¥ng b√°o n·ªÅn: ${message.messageId}');
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  // ‚úÖ ƒêƒÉng k√Ω x·ª≠ l√Ω th√¥ng b√°o khi ·ª©ng d·ª•ng ·ªü ch·∫ø ƒë·ªô n·ªÅn
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // ‚úÖ Kh·ªüi t·∫°o th√¥ng b√°o v√† xin quy·ªÅn th√¥ng b√°o
  await setupFirebaseMessaging();

  runApp(const MyApp());
}

Future<void> setupFirebaseMessaging() async {
  FirebaseMessaging messaging = FirebaseMessaging.instance;

  // ‚úÖ Xin quy·ªÅn nh·∫≠n th√¥ng b√°o tr√™n iOS
  NotificationSettings settings = await messaging.requestPermission(
    alert: true,
    badge: true,
    sound: true,
  );

  if (settings.authorizationStatus == AuthorizationStatus.authorized) {
    debugPrint('üîî ƒê√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn nh·∫≠n th√¥ng b√°o!');
  } else {
    debugPrint('‚ùå Kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn nh·∫≠n th√¥ng b√°o!');
  }

  // ‚úÖ L·∫•y FCM Token ƒë·ªÉ s·ª≠ d·ª•ng cho th√¥ng b√°o
  String? token = await messaging.getToken();
  debugPrint('üî• FCM Token: $token');

  // ‚úÖ X·ª≠ l√Ω th√¥ng b√°o khi ·ª©ng d·ª•ng ƒëang m·ªü (foreground)
  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    debugPrint(
        'üîî Nh·∫≠n th√¥ng b√°o khi ƒëang m·ªü ·ª©ng d·ª•ng: ${message.notification?.title}');

    if (message.notification != null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o d·∫°ng snackbar ho·∫∑c dialog
      showDialog(
        context: navigatorKey.currentContext!,
        builder: (context) => AlertDialog(
          title: Text(message.notification!.title ?? 'Th√¥ng b√°o'),
          content:
              Text(message.notification!.body ?? 'N·ªôi dung kh√¥ng x√°c ƒë·ªãnh'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√≥ng'),
            ),
          ],
        ),
      );
    }
  });

  // ‚úÖ X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o t·ª´ tr·∫°ng th√°i n·ªÅn ho·∫∑c ƒë√£ b·ªã ƒë√≥ng
  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
    debugPrint(
        'üîî Ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o: ${message.notification?.title}');
    // üëâ Chuy·ªÉn ƒë·∫øn m√†n h√¨nh c·∫ßn thi·∫øt khi nh·∫•n v√†o th√¥ng b√°o
    navigatorKey.currentState?.push(
      MaterialPageRoute(builder: (_) => const HomeScreen()),
    );
  });
}

// ‚úÖ D√πng GlobalKey ƒë·ªÉ x·ª≠ l√Ω th√¥ng b√°o t·ª´ m·ªçi n∆°i trong ·ª©ng d·ª•ng
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider<MobileAuthProvider>(
          create: (_) => MobileAuthProvider(),
        ),
      ],
      child: Sizer(
        builder: (context, orientation, deviceType) {
          return MaterialApp(
            debugShowCheckedModeBanner: false,
            navigatorKey:
                navigatorKey, // ‚úÖ Th√™m navigatorKey ƒë·ªÉ x·ª≠ l√Ω th√¥ng b√°o
            home: StreamBuilder<User?>(
              stream: FirebaseAuth.instance.authStateChanges(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.active) {
                  if (snapshot.hasData) {
                    return const HomeScreen();
                  } else {
                    return const MobileLoginScreen();
                  }
                }
                return const Scaffold(
                  body: Center(child: CircularProgressIndicator()),
                );
              },
            ),
          );
        },
      ),
    );
  }
}
